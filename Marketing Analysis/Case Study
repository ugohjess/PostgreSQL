-- The major tables used below have been previously created and they are:
-- joined_dataset: A table created  for customer insights and movie recommendations --
-- actor_joined_datasets: A table created  for actor insights and movie recommendations --
-- Check Table joins reppository for the join codes and explanation --


1. Which film title was the most recommended for all customers?

-- a cte is used to create a table made up of a union of films from all recommendation tables --

WITH all_recomendations AS (
SELECT
title
FROM
category_recommendations

UNION ALL

SELECT
title
FROM
actor_recommendations
)
SELECT
title,
COUNT(*) AS recomendation_counts
FROM
all_recomendations
GROUP BY
title
ORDER BY
recomendation_counts DESC;

2. What is the average percentile ranking for each customer in their top category rounded to the nearest 2 decimal places?
SELECT
ROUND(AVG(percentile::NUMERIC), 2)
FROM first_category_insights;

3. What is the 80th percentile of films watched featuring each customer’s favourite actor? 
SELECT
PERCENTILE_CONT(0.8) WITHIN GROUP (
ORDER BY
rental_count
)
FROM
top_actor_counts;

4. How many customers were included in the email campaign?

-- All customers on the campaign list make up the email campaign--

SELECT
count(customer_id)
from
dvd_rentals.customer;

5. Out of all the possible films - what percentage coverage do we have in our recommendations?

-- a cte is used to create a colums made up of a distinct union of films from all recommendation tables --

WITH all_recommendations AS (
SELECT
title
FROM
category_recommendations
UNION
SELECT
title
FROM
actor_recommendations
),

-- another cte is used to count the total number of recommended movies and total movies--
recommendations AS (
SELECT
COUNT(DISTINCT title) AS _count
FROM
all_recommendations
),
all_films AS (
SELECT
COUNT(DISTINCT title) AS _count
FROM
dvd_rentals.film
)

-- the average count is calculated--
SELECT
all_films._count AS all,
recommendations._count AS recommended,
ROUND(
100 * recommendations._count :: NUMERIC / all_films._count :: NUMERIC
) AS coverage_percentage
FROM
recommendations
CROSS JOIN all_films;

6. What is the most popular top category?
– The top category would be the category with the highest number of rentals –
SELECT
category_name,
count(*) as category_count
FROM
first_category_insights
GROUP BY
category_name
ORDER BY
category_count DESC
LIMIT
1;

7. What is the 4th most popular top category?
SELECT
category_name,
count(*) as category_count
FROM
first_category_insights
GROUP BY
category_name
ORDER BY
category_count DESC
LIMIT
4;

8. Which actor was the most popular for all customers?
SELECT
actor,
count(*) as actor_count
from
rental_updated_dataset
GROUP BY actor
ORDER BY actor_count DESC
;

9. What is the cumulative distribution of the top 5 percentile values for the top category from the first_category_insights table rounded to the nearest round
percentage ?
SELECT
ROUND(percentile) AS percentile,
COUNT(*),
ROUND(
100 * CUME_DIST() OVER (
ORDER BY
ROUND(percentile)
)
) AS cumulative_distribution
FROM
first_category_insights
GROUP BY
1
ORDER BY
1;

10. What is the median of the second category percentage of entire viewing history?

SELECT
PERCENTILE_CONT(0.5) WITHIN GROUP(
ORDER BY
total_percentage
)
FROM
second_category_insights

11. What was the average number of films watched by each customer?
WITH movies_watched_count AS(
SELECT
customer_id,
SUM(rental_count) as counts
FROM
category_counts
GROUP BY
customer_id
)
SELECT
ROUND(AVG(counts))
FROM
movies_watched_count;

12. What is the top combination of top 2 categories and how many customers if the order is relevant (e.g. Horror and Drama is a different combination to Drama and
Horror)?
SELECT
cat_1,
cat_2,
COUNT(*) AS customer_count
FROM
final_data_asset
GROUP BY
cat_1,
cat_2
ORDER BY
3 DESC
LIMIT
5;

13. How many films on average had customers already seen that feature their favourite actor rounded to closest integer?
SELECT
CEILING(AVG(rental_count))
FROM
top_actor_counts;
