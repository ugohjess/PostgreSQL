Distribution Functions

–The Over and Order by clauses in the query above help to re-order the dataset, it sorts by ascending order by default. 
The NTILE() window function is used to perform the assignment of numbers 1 through your preferred end point for each row in the records. It divides the data into buckets.
SELECT 
measure_value, 
NTILE(100) OVER ( ORDER BY measure_value ) as percentile 
FROM health.user_logs 
WHERE measure = 'weight';

–Given that percentile values have been calculated and dataset is split into 100 buckets , a GROUP BY can be used on the percentile column from the previous table to 
calculate our MIN and MAX measure_value ranges for each bucket and also the COUNT of records for the percentile_counts field. This can be done with CTEs.
WITH percentile_values AS (
SELECT 
measure_value, 
NTILE(100) OVER ( ORDER BY measure_value ) AS percentile 
FROM health.user_logs WHERE measure = 'weight' 
) SELECT 
percentile, 
MIN(measure_value) AS floor_value, 
MAX(measure_value) AS ceiling_value, C
OUNT(*) AS percentile_counts 
FROM percentile_values 
GROUP BY percentile 
ORDER BY percentile;

–Identification of large outliers by analyzing the 100th percentile. A Common Table Expression was used:
WITH percentile_values AS ( 
SELECT 
measure_value, 
NTILE(100) OVER ( ORDER BY measure_value ) AS percentile 
FROM health.user_logs 
WHERE measure = 'weight' 
) SELECT 
measure_value, 
ROW_NUMBER() OVER ( ORDER BY measure_value DESC ) as row_number_order, 
RANK() OVER ( ORDER BY measure_value DESC ) as rank_order, 
DENSE_RANK() OVER ( ORDER BY measure_value DESC ) as dense_rank_order 
FROM percentile_values 
WHERE percentile = 100 
ORDER BY measure_value DESC;

–Identification of small outliers by analyzing the 1st percentile. A Common Table Expression was used:
WITH percentile_values AS ( 
SELECT 
measure_value, 
NTILE(100) OVER ( ORDER BY measure_value ) AS percentile 
FROM health.user_logs 
WHERE measure = 'weight' 
) SELECT 
measure_value, 
ROW_NUMBER() OVER ( ORDER BY measure_value DESC ) as row_number_order, 
RANK() OVER ( ORDER BY measure_value DESC ) as rank_order, 
DENSE_RANK() OVER ( ORDER BY measure_value DESC ) as dense_rank_order 
FROM percentile_values 
WHERE percentile = 1 
ORDER BY measure_value;

–Creating a new table without observed outliers
DROP TABLE IF EXISTS clean_weight_logs;
CREATE TEMP TABLE clean_weight_logs AS (
SELECT 
* 
FROM health.user_logs 
WHERE
measure = 'weight' 
AND measure_value > 0 
AND measure_value < 201 );

– Recalculating summary statistics on the new temp table
SELECT
  ROUND(MIN(measure_value), 2) AS minimum_value,
  ROUND(MAX(measure_value), 2) AS maximum_value,
  ROUND(AVG(measure_value), 2) AS mean_value,
  ROUND(
    CAST(PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY measure_value) AS NUMERIC),
    2
  ) AS median_value,
  ROUND(
    MODE() WITHIN GROUP (ORDER BY measure_value),
    2
  ) AS mode_value,
  ROUND(STDDEV(measure_value), 2) AS standard_deviation,
  ROUND(VARIANCE(measure_value), 2) AS variance_value
FROM clean_weight_logs;
